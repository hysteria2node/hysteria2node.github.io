<!DOCTYPE html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://hysteria2node.github.io/news/article-88059.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始</title>
        <meta name="description" content="1. 前言 本文将介绍希尔排序、归并排序、基数排序（桶排序）。 在所有的排序算法中，冒泡、插入、选择属于相类似的排序算法，这类算法的共同点：通过不停地比较，再使用交换逻辑重新确定数据的位置。 希尔、归" />
        <link rel="icon" href="/assets/website/img/hysteria2node/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Hysteria2 Node免费节点分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://hysteria2node.github.io/news/article-88059.htm" />
    <meta property="og:site_name" content="Hysteria2 Node免费节点分享站" />
    <meta property="og:title" content="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始" />
    <meta property="og:image" content="https://hysteria2node.github.io/uploads/20240731-1/3117224c622b87236faf9fd284b0b055.webp" />
        <meta property="og:release_date" content="2025-04-04T09:06:13" />
    <meta property="og:updated_time" content="2025-04-04T09:06:13" />
        <meta property="og:description" content="1. 前言 本文将介绍希尔排序、归并排序、基数排序（桶排序）。 在所有的排序算法中，冒泡、插入、选择属于相类似的排序算法，这类算法的共同点：通过不停地比较，再使用交换逻辑重新确定数据的位置。 希尔、归" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://cdn.bootcdn.net">

    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel='stylesheet' href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="/assets/website/css/hysteria2node/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/hysteria2node/animate.min.css">
    <link rel="stylesheet" href="/assets/website/css/hysteria2node/app.css">
    <script src="/assets/website/js/frontend/hysteria2node/jquery.min.js"></script>
    <script> $(window).on('load', function(){ $(".loader").fadeOut(2000); }); </script>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-9GWW1PHQLZ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-9GWW1PHQLZ');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <div class="loader"></div>
    <!-- NAVIGATION 
            =================-->
    <nav class="navbar navbar-expand-lg navbar-dark fixed-top" id="mainNav">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">
                        <span>Hysteria2 Node</span>
                        </a>
            <button class="navbar-toggler navbar-toggler-right" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
                Menu
                <i class="fa fa-bars"></i>
            </button>
            <div class="collapse navbar-collapse" id="navbarResponsive">
                <ul class="navbar-nav text-uppercase ml-auto">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                    </ul>
            </div>
        </div>
    </nav>
    <!-- HEADER 
            =================-->
    <header id="conent" class="header-cat">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <h1>Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始</h1>
                    <p>
                      <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </p>
                </div>
            </div>
        </div>
    </header>
        <!-- HOW TO WORK 
            =================-->
    <section id="how-work" class="how-work">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<h2 id="1-前言">1. 前言</h2> <p>本文将介绍<code>希尔排序</code>、<code>归并排序</code>、<code>基数排序（桶排序）</code>。</p> <p>在所有的排序算法中，<code>冒泡</code>、<code>插入</code>、<code>选择</code>属于相类似的排序算法，这类算法的共同点：<strong>通过不停地比较，再使用交换逻辑重新确定数据的位置。</strong></p> <p><code>希尔</code>、<code>归并</code>、<code>快速</code>排序算法也可归为同一类，它们的共同点都是建立在分治思想之上。把大问题分拆成小问题，解决所有小问题后，再合并每一个小问题的结果，最终得到对原始问题的解答。</p> <blockquote> <p>通俗而言：化整为零，各个击破。</p> </blockquote> <p>分治算法很有哲学蕴味：老祖宗所言<strong>合久必分，分久必合</strong>，分开地目的是为了更好的合并。</p> <p><strong>分治算法的求解流程：</strong></p> <ul> <li> <p><strong>分解问题</strong>：将一个需要解决的、看起很复杂<strong><code>原始问题</code></strong> 分拆成很多独立的<strong><code>子问题</code></strong>，<code>子问题</code>与<code>原始问题</code>有相似性。</p> <blockquote> <p>如：一个数列的局部（小问题）有序，必然会让数列最终（原始问题）有序。</p> </blockquote> </li> <li> <p><strong>求解子问题</strong>：子问题除了与原始问题具有相似性，也具有独立性，即所有子问题都可以独立求解。</p> </li> <li> <p><strong>合并子问题：</strong>合并每一个子问题的求解结果最终可以得到原始问题的解。</p> </li> </ul> <p>下面通过深入了解<code>希尔排序算法</code>，看看<code>分治算法</code>是如何以哲学之美的方式工作的。</p> <h2 id="2-希尔排序">2. 希尔排序</h2> <p>讲解希尔之前，先要回顾一下插入排序。插入排序的平均时间复杂度，理论上而言和冒泡排序是一样的 O（n<sup>2</sup>），但如果数列是前部分有序，则每一轮只需比较一次，对于<code>n</code> 个数字的原始数列而言，时间复杂度可以是达到<code>O(n)</code>。</p> <p><strong>插入排序的时间复杂度为什么会出现如此有意思的变化？</strong></p> <ul> <li>插入排序算法的排序思想是尽可能<strong>减少数字之间的交换次数</strong>。</li> <li>通常情形下，交换处理的时间大约是移动的 3 倍。这便是插入排序的性能有可能要优于冒泡排序的原因。</li> </ul> <p>希尔排序算法本质就是插入排序，或说是对插入排序的改良。</p> <p><strong>其算法理念：让原始数列不断趋近于排序，从而降低插入排序的时间复杂度。</strong></p> <p><strong>希尔排序的实现流程：</strong></p> <ul> <li>把原始数列从逻辑上切割成诸多个子数列。</li> <li>对每一个子数列使用插入排序算法排序。</li> <li>当所有子数列完成后，再对原数列进行最后一次插入算法排序。</li> </ul> <p>希尔排序算法的理念：<strong>当数列局部有序时，全局必然是趋向于有序”</strong>。</p> <p>希尔排序的关键在于如何切分子数列，切分方式可以有<code>2</code> 种：</p> <blockquote> <p>任何时候使用分治理念解决问题时，分拆子问题都是关键的也是核心的。</p> </blockquote> <h3 id="21-前后切分">2.1 前后切分</h3> <p>如有原始数列=[3，9，8，1，6，5，7] 采用前后分成 2 个子数列。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/65f0c995f1842cc2a8506c996798fc7b.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <p><strong>前后分</strong>算得上是简单粗暴的切分方案，没有太多技术含量，这种一根筋的切分方式，对于原始问题的最终性能优化可能起不了太多影响。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/8cf3c95258f3502a287a5ef274a9995a.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <p>如上图所示，对子数列排序后，如果要实现原始数列中的所有数字从小到大排列有序，则后部分的数字差不多全部要移到时前部分数字的中间，其移动量是非常大的。</p> <p>后面的<code>4</code> 个数字中，<code>1</code> 需要移动 3 次，<code>5</code>、<code>6</code>、<code>7</code> 需要移动<code>2</code> 次， 肉眼可见的次数是<code>9</code> 次。</p> <p>这种分法很难实现数字局部有序的正态分布，因为<strong>数字的位置变化不大</strong>。</p> <p>如下图是原始数列=<code>[3，9，8，1，6，5，7]</code> 的原始位置示意图：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/bec4f2ead0519d707f895ef22a37d071.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <p>使用前后切分后的数字位置变化如下图所示，和上图相比较，数字的位置变化非常有限，而且是限定在一个很窄的范围内。也就是说子问题的求解结果对最终问题的结果的影响很微小。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/af43d1651c20356e915a836e994f22e9.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <h3 id="22-增量切分">2.2 增量切分</h3> <p>增量切分采用间隔切分方案，可能让数字局部有序以正态分布。</p> <p>增量切分，需要先设定一个增量值。如对原始数列=<code>[3，9，8，1，6，5，7]</code> 设置切分增量为<code>3</code> 时，整个数列会被切分成 3 个逻辑子数列。增量数也决定最后能切分多少个子数列。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/b2f909be8b43e9cd943dd44d60199da7.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <p>对切分后的<code>3</code> 个子数列排序后可得到下图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/843882955c8effdf441790b021ac928f.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <p>在此基础之上，再进行插入排序的的次数要少很多。</p> <blockquote> <p>使用增量切分后再排序，原始数列中的数字的位置变化范围较大。</p> <p>如数字<code>9</code> 原始位置是<code>1</code>，经过增量切分再排序后位置可以到<code>4</code>。已经很接近<code>9</code> 的最终位置<code>6</code> 了。</p> </blockquote> <p>下图是增量切分后数字位置的变化图，可以看出来，几乎所有的数字都产生了位置变化 ，且位置变化的跨度较大。有整体趋于有序的势头。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/be819c7cf8a14f66e9a5669c03a9f477.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <p>实现希尔排序算法时，最佳的方案是先初始化一个增量值，切分排序后再减少增量值，如此反复直到增量值等于 1 （也就是对原数列整体做插入排序）。</p> <blockquote> <p>增量值大，数字位置变化的跨度就大，增量值小，数字位置的变化会收紧。</p> </blockquote> <p><strong>编码代码希尔排序：</strong></p> <pre><code class="language-python"># 希尔排序 def shell_sort(nums):     # 增量     increment = len(nums) // 2     # 新数列     while increment &gt; 0:         # 增量值是多少，则切分的子数列就有多少         for start in range(increment):             insert_sort(nums, start, increment)         # 修改增量值，直到增量值为 1             increment = increment // 2          # 插入排序 def insert_sort(nums, start, increment):     for back_idx in range(start + increment, len(nums), increment):         for front_idx in range(back_idx, 0, -increment):             if nums[front_idx] &lt; nums[front_idx - increment]:                 nums[front_idx], nums[front_idx - increment] = nums[front_idx - increment], nums[front_idx]             else:                 break  nums = [3, 9, 8, 1, 6, 5, 7] shell_sort(nums) print(nums)</code></pre> <p>这里会有一个让人疑惑的观点：<strong>难道一次插入排序的时间复杂度会高于多次插入排序时间复杂度？</strong></p> <p>通过切分方案，经过子数列的微排序（因子数列数字不多，其移动交换量也不会很大），最后一次插入排序的移动次数可以达到最小，只要增量选择合适，时间复杂度可以控制 在<code>O(n)</code> 到<code>O（&lt;sup&gt;2&lt;/sup&gt;）</code> 之间。完全是有可能优于单纯的使用一次插入排序。</p> <h2 id="3-归并排序">3. 归并排序</h2> <p>归并排序算法也是基于分治思想。和希尔排序一样，需要对原始数列进行切分，但是切分的方案不一样。</p> <p>相比较希尔排序，归并排序的分解子问题，求解子问题，合并子问题的过程分界线非常清晰。可以说，归并排序更能完美诠释什么是分治思想。</p> <h3 id="31--分解子问题">3.1  分解子问题</h3> <p>归并排序算法的分解过程采用二分方案。</p> <ul> <li> <p><strong>把原始数列一分为二。</strong></p> </li> <li> <p><strong>然后在已经切分后的子数列上又进行二分。</strong></p> </li> <li> <p><strong>如此反复，直到子数列不能再分为止。</strong></p> <p>如下图所示：</p> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/508ce45757b9f60f885de1efbcc716e4.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <p>如下代码，使用递归算法对原数列进行切分，通过输出结果观察切分过程：</p> <pre><code class="language-python"># 切分原数列 def split_nums(nums):     print(nums)     if len(nums) &gt; 1:         # 切分线，中间位置         sp_line = len(nums) // 2         split_nums(nums[0:sp_line])         split_nums(nums[sp_line:])  nums = [3, 9, 8, 1, 6, 5, 7] split_nums(nums)</code></pre> <p><strong>输出结果：</strong>和上面演示图的结论一样。</p> <pre><code class="language-python">[3, 9, 8, 1, 6, 5, 7] [3, 9, 8] [3] [9, 8] [9] [8] [1, 6, 5, 7] [1, 6] [1] [6] [5, 7] [5] [7]</code></pre> <h3 id="32-求解子问题">3.2 求解子问题</h3> <p>切分后，对每相邻<code>2</code>  个子数列进行合并。当对相邻<code>2</code> 个数列进行合并时，不是简单合并，需要保证合并后的数字是排序的。如下图所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/470b2f8efd68a58134eca8135f9502a8.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <h3 id="33-合并排序">3.3 合并排序</h3> <p>如何实现<code>2</code> 个数字合并后数字有序？</p> <p>使用子数列中<strong>首数字比较</strong>算法进行合并排序。如下图演示了如何合并<code>nums01=[1,3,8,9]、nums02=[5,6,7]</code> 2 个子数列。</p> <blockquote> <p>子数列必须是有序的！！</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9149011df64adbf510333cc85cd53319.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <ul> <li>数字 1 和 数字 5 比较，5 大于 1 ，数字  1 先位于合并数列中。</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9cd771e4657c402f59fc1455fc7afe90.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <ul> <li>数字 3 与数字 5 比较，数字 3 先进入合并数列中。</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ee73b325584dae1530ae03998e5eea4e.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <ul> <li>数字 8 和数字 5 比较，数字 5 进入合并数列中。</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/e47b43e7d820b29248e167c56904fa0e.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <p>从头至尾，进行首数字大小比较，最后，可以保证合并后的数列是有序的。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/eaff72e4b87ffef1b1ddbe54d3472e71.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <p><strong>编写一个合并排序代码：</strong></p> <p>如果仅仅是合并<code>2</code> 个有序数列，本文提供<code>2</code> 个方案：</p> <ul> <li>不增加额外的存储空间：把最终合并排序好的数字全部存储到其中的一个数列中。</li> </ul> <pre><code class="language-python">def merge_sort(nums01, nums02):     # 为 2 个数列创建 2 个指针     idx_01 = 0     idx_02 = 0     while idx_01 &lt; len(nums01) and idx_02 &lt; len(nums02):         if nums01[idx_01] &gt; nums02[idx_02]:             # 这里不额外增加存储空间，如果数列 2 中的值大于数字 1 的插入到数列 1 中             nums01.insert(idx_01, nums02[idx_02])             idx_02 += 1         # 数列 1 的指针向右移动             idx_01 += 1     # 检查 nums02 中的数字是否已经全部合并到 nums01 中     while idx_02 &lt; len(nums02):         nums01.append(nums02[idx_02])         idx_02 += 1  nums01 = [1, 2, 8, 9] nums02 = [5, 6, 7, 12, 15] merge_sort(nums01, nums02) # 合并后的数字都存储到了第一个数列中 print(nums01) ''' 输出结果： [1,2,5,6,7,8,9,12,15] '''</code></pre> <ul> <li>增加一个空数列，用来保存最终合并的数字。</li> </ul> <pre><code class="language-python"># 使用附加数列 nums=[] def merge_sort(nums01, nums02):     # 为 2 个数列创建 2 个指针     idx_01 = 0     idx_02 = 0     k=0     while idx_01 &lt; len(nums01) and idx_02 &lt; len(nums02):         if nums01[idx_01] &gt; nums02[idx_02]:             nums.append(nums02[idx_02])             idx_02 += 1         else:             nums.append(nums01[idx_01])             idx_01 += 1         k+=1     # 检查是否全部合并     while idx_02 &lt; len(nums02):         nums.append(nums02[idx_02])         idx_02 += 1     while idx_01 &lt; len(nums01):         nums.append(nums01[idx_01])         idx_01 += 1  nums01 = [1, 2, 8, 9] nums02 = [5, 6, 7, 12, 15] merge_sort(nums01, nums02) print(nums)</code></pre> <p>前面是分步讲解切分和合并逻辑，现在把切分和合并逻辑合二为一，就完成了归并算法的实现：</p> <pre><code class="language-python">def merge_sort(nums):     if len(nums) &gt; 1:         # 切分线，中间位置         sp_line = len(nums) // 2         nums01 = nums[:sp_line]         nums02 = nums[sp_line:]         merge_sort(nums01)         merge_sort(nums02)          # 为 2 个数列创建 2 个指针         idx_01 = 0         idx_02 = 0         k = 0         while idx_01 &lt; len(nums01) and idx_02 &lt; len(nums02):             if nums01[idx_01] &gt; nums02[idx_02]:                 # 合并后的数字要保存到原数列中                 nums[k] = nums02[idx_02]                 idx_02 += 1             else:                 nums[k] = nums01[idx_01]                 idx_01 += 1             k += 1         # 检查是否全部合并         while idx_02 &lt; len(nums02):             nums[k] = nums02[idx_02]             idx_02 += 1             k += 1         while idx_01 &lt; len(nums01):             nums[k] = nums01[idx_01]             idx_01 += 1             k += 1  nums = [3, 9, 8, 1, 6, 5, 7] merge_sort(nums) print(nums)</code></pre> <p>个人觉得，<strong>归并算法对于理解分治思想有大的帮助。</strong></p> <p><strong>从归并算法上可以完整的体现分治理念的哲学之美。</strong></p> <h2 id="4-基数排序">4. 基数排序</h2> <p>基数排序<code>（radix sort）</code>属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或 bin sort。</p> <blockquote> <p>基数排序没有使用分治理念，放在本文一起讲解，是因为基数排序有一个对数字自身切分逻辑。</p> </blockquote> <p><strong>基数排序的最基本思想：</strong></p> <p>如对原始数列<code>nums = [3, 9, 8, 1, 6, 5, 7]</code> 中的数字使用基数排序。</p> <ul> <li> <p>先提供一个长度为<code>10</code>  的新空数列（本文也称为排序数列）。</p> <blockquote> <p>为什么新空数列的长度要设置为 10？等排序完毕，相信大家就能找到答案。</p> </blockquote> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/dd7f82e5ccb64c6da65e1b4caf411854.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <p>。把原数列中的数字转存到新空数列中，转存方案：</p> <p>nums 中的数字 3 存储在新数列索引号为 3 的位置。</p> <p>nums 中的数字 9 存储在新数列索引号为 9 的位置。</p> <p>nums 中的数字 8 存储在新数列索引号为 8 的位置。</p> <p>……</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/c2859560a9c16a84d7897e5e8fda65ec.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <p>从上图可知，原数列中的数字所转存到排序数列中的位置，是数字所代表的索引号所指的位置。显然，经过转存后，新数列就是一个排好序的数列。</p> <p><strong>新空数列的长度定义为多大由原始数列中数字的最大值来决定。</strong></p> <p><strong>编码实现：</strong></p> <pre><code class="language-python"># 原数列 nums = [3, 9, 8, 1, 6, 5, 7] # 找到数列中的最大值 sort_nums=[0]*(max(nums)+1) for i in nums:     sort_nums[i]=i  print([i for i in sort_nums if i!=0]) ''' 输出结果： [1,3,5,6,7,8,9] '''</code></pre> <p>使用上述方案创建新空数据，如果数字之间的间隔较大时，新数列的空间浪费就非常大。</p> <p>如对<code>nums=[1,98,51,2,32,4,99,13,45]</code> 使用上述方案排序，<strong>新空数列</strong>的长度要达到<code>99</code> ，真正需要保存的数字只有<code>7</code> 个，如此空间浪费几乎是令人恐怖的。</p> <p>所以，有必要使用改良方案。如果在需要排序的数字中出现了<code>2</code> 位以上的数字，则使用如下法则：</p> <ul> <li>先根据每一个数字个位上的数字进行存储。个位数是 1 存储在位置为 1 的位置，是 9 就存储在位置是 9 的位置。如下图：</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/89f98e7f19411723b4640ef88b00522c.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <blockquote> <p>可看到有可能在同一个位置保存多个数字。<strong>这也是基数排序也称为桶排序的原因。</strong></p> <p><strong>一个位置就是一个桶，可以存放多个具有相同性质的数字。如上图：个位上数字相同的数字就在一个桶中。</strong></p> </blockquote> <ul> <li>把存放在<strong>排序数列</strong>中的数字按顺序重新拿出来，这时的数列顺序变成<code>nums=[1，51，2，32，13，4，45，8，99]</code></li> <li>把重组后数列中的数字按十位上的数字重新存入排序数列。</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/395f5f176dc71d19368d588b0db47272.jpg" alt="Python 一网打尽＜排序算法＞之从希尔排序算法的分治哲学开始"></p> <p>可以看到，经过 2 轮转存后，原数列就已经排好序。</p> <blockquote> <p>这个道理是很好理解的：</p> <p><em>现实生活中，我们在比较 2 个数字 大小时，可以先从个位上的数字相比较，然后再对十位上的数字比较。</em></p> <p>基数排序，很有生活的味道！！</p> </blockquote> <p><strong>编码实现基数排序：</strong></p> <pre><code class="language-python">nums = [1, 98, 51, 2, 32, 4, 99, 13, 45] # 数列中的最大值 m = max(nums) # 确定最大位数，用来确定需要转存多少次 l = len(str(m))  for i in range(l + 1):     # 排序数列，也是桶     sort_nums = [[] for _ in range(10)]     for n in nums:         # 分解数字个位上的数字         g_s = (n // 10 ** i) % 10         # 根据个位上的数字找到转存位置         sub_nums = sort_nums[g_s]         sub_nums.append(n)     # 合并数据     nums = []     for l in sort_nums:         nums.extend(l) print(nums) ''' 输出结果： [1, 2, 4, 13, 32, 45, 51, 98, 99] '''</code></pre> <p>上述转存过程是由低位到高位，也称为<code>LSD</code> ，也可以先高位后低位方案转存<code>MSD</code>。</p> <h2 id="5-总结">5. 总结</h2> <p>分治很有哲学味道，当你遇到困难，应该试着找到问题的薄弱点，然后一点点地突破。</p> <p>当遇到困难时，老师们总会这么劝解我们。</p> <p>分治其实和项目开发中的组件设计思想也具有同工异曲之处。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-87332.htm">动物防疫工作包括哪些（动物防疫的职责）</a></p>
                                        <p>下一个：<a href="/news/article-88060.htm">手写Mybatis第5章：数据源的解析、创建和使用</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-83729.htm" title="动物医院大众点评文案怎么写（动物医院诊疗活动范围）">动物医院大众点评文案怎么写（动物医院诊疗活动范围）</a></li>
                        <li class="py-2"><a href="/news/article-65685.htm" title="vue妙用ref父组件访问子组件中的值和调用子组件的方法">vue妙用ref父组件访问子组件中的值和调用子组件的方法</a></li>
                        <li class="py-2"><a href="/news/article-77500.htm" title="选择排序详解（Java实现）">选择排序详解（Java实现）</a></li>
                        <li class="py-2"><a href="/news/article-68196.htm" title="基于.NetCore开发博客项目 StarBlog &#8211; (4) markdown博客批量导入_在线工具">基于.NetCore开发博客项目 StarBlog &#8211; (4) markdown博客批量导入_在线工具</a></li>
                        <li class="py-2"><a href="/news/article-88060.htm" title="手写Mybatis第5章：数据源的解析、创建和使用">手写Mybatis第5章：数据源的解析、创建和使用</a></li>
                        <li class="py-2"><a href="/news/article-65686.htm" title="开宠物用品店挣钱吗知乎推荐（开宠物用品店货源）">开宠物用品店挣钱吗知乎推荐（开宠物用品店货源）</a></li>
                        <li class="py-2"><a href="/news/article-74102.htm" title="宠物领养协议书模板下载电子版 宠物领养协议书模板下载电子版图片">宠物领养协议书模板下载电子版 宠物领养协议书模板下载电子版图片</a></li>
                        <li class="py-2"><a href="/news/article-79553.htm" title="动物疫苗多少钱打一次到哪打呢英语怎么说（动物疫苗一般在哪里打）">动物疫苗多少钱打一次到哪打呢英语怎么说（动物疫苗一般在哪里打）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-4-hysteria-node.htm" title="3月4日更新 | V2ray/Trojan/SSR/Hysteria2 | 19.1M/S免费节点订阅链接">3月4日更新 | V2ray/Trojan/SSR/Hysteria2 | 19.1M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-81584.htm" title="SpringAop实现原理及代理模式">SpringAop实现原理及代理模式</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <!-- FOOTER 
            =================-->
    <footer>
        <div class="container-fluid footer-b text-center">
                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
            <small>Hysteria2 Node免费节点分享站 版权所有 Powered by WordPress</small>
        </div>
    </footer>
    <script src="/assets/website/js/frontend/hysteria2node/popper.min.js"></script>
    <script src="/assets/website/js/frontend/hysteria2node/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/hysteria2node/jquery.easing.min.js"></script>
    <script src="/assets/website/js/frontend/hysteria2node/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/hysteria2node/wow.min.js"></script>
    <script src="/assets/website/js/frontend/hysteria2node/app.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>