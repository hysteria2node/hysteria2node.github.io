<!DOCTYPE html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://hysteria2node.github.io/news/article-30745.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>mybatis &#8211; PerpetualCache 一级缓存</title>
        <meta name="description" content="mybatis - PerpetualCache 一级缓存  mybatis 使用 cache 顺序 DefaultSqlSession --&gt; CacheExecutor(二级缓存) --&g" />
        <link rel="icon" href="/assets/website/img/hysteria2node/favicon.ico" type="image/x-icon"/>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel='stylesheet' href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="/assets/website/css/hysteria2node/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/hysteria2node/animate.min.css">
    <link rel="stylesheet" href="/assets/website/css/hysteria2node/app.css">
    <script src="/assets/website/js/frontend/hysteria2node/jquery.min.js"></script>
    <script> $(window).on('load', function(){ $(".loader").fadeOut(2000); }); </script>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-9GWW1PHQLZ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-9GWW1PHQLZ');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <div class="loader"></div>
    <!-- NAVIGATION 
            =================-->
    <nav class="navbar navbar-expand-lg navbar-dark fixed-top" id="mainNav">
        <div class="container-fluid">
                        <a class="navbar-brand" href="/">
                Hysteria2 Node
            </a>
                        <button class="navbar-toggler navbar-toggler-right" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
                Menu
                <i class="fa fa-bars"></i>
            </button>
            <div class="collapse navbar-collapse" id="navbarResponsive">
                <ul class="navbar-nav text-uppercase ml-auto">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="#">关于</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">联系</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <!-- HEADER 
            =================-->
    <header id="conent" class="header-cat">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <h1>mybatis &#8211; PerpetualCache 一级缓存</h1>
                    <p>
                      <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </p>
                </div>
            </div>
        </div>
    </header>
        <!-- HOW TO WORK 
            =================-->
    <section id="how-work" class="how-work">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-dracula"> <h2> <a id="mybatis__PerpetualCache__0" rel="nofollow"></a>mybatis - PerpetualCache 一级缓存</h2> <h3> <a id="mybatis__cache__2" rel="nofollow"></a>mybatis 使用 cache 顺序</h3> <pre><code class="prism language-bash">DefaultSqlSession --<span class="token operator">&gt;</span> CacheExecutor<span class="token punctuation">(</span>二级缓存<span class="token punctuation">)</span> --<span class="token operator">&gt;</span> BaseExecutor<span class="token punctuation">(</span>PerpetualCache一级缓存<span class="token punctuation">)</span> SimpleExecutor </code></pre> <h3> <a id="_8" rel="nofollow"></a>一级缓存生命周期</h3> <pre><code class="prism language-java"><span class="token comment">//DefaultSqlSession.java</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultSqlSession</span> <span class="token keyword">implements</span> <span class="token class-name">SqlSession</span> <span class="token punctuation">{<!-- --></span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Configuration</span> configuration<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> autoCommit<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">boolean</span> dirty<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cursor</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> cursorList<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token comment">// BaseExecutor.java</span> <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseExecutor</span> <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">{<!-- --></span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">BaseExecutor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">Transaction</span> transaction<span class="token punctuation">;</span>   <span class="token keyword">protected</span> <span class="token class-name">Executor</span> wrapper<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">ConcurrentLinkedQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeferredLoad</span><span class="token punctuation">&gt;</span></span> deferredLoads<span class="token punctuation">;</span>   <span class="token keyword">protected</span> <span class="token class-name">PerpetualCache</span> localCache<span class="token punctuation">;</span>   <span class="token keyword">protected</span> <span class="token class-name">PerpetualCache</span> localOutputParameterCache<span class="token punctuation">;</span>   <span class="token keyword">protected</span> <span class="token class-name">Configuration</span> configuration<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> queryStack<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">boolean</span> closed<span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p>可以整理出 PerpetualCache 的调用关系</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230223/547ebb77ccfe57cfa6eaac6fcd0d8260.jpg" alt="mybatis - PerpetualCache 一级缓存"></p> <p>所以 一级缓存的生命周期是和 SqlSession 对象绑定在一起的，<strong>如果 sqlSession 不一样，是不会走缓存的</strong></p> <h3> <a id="_48" rel="nofollow"></a>使用缓存例子</h3> <pre><code class="prism language-java"><span class="token annotation punctuation">@Test</span> <span class="token comment">//@Transactional</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cacheTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token class-name">AccountModel</span> accountModel <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>accountModel<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">AccountModel</span> accountModel1 <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>accountModel1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <p><strong>如果不加 @Transactional 注解，是不会使用一级缓存的，也就是创建了两个不同的 SqlSession 对象， 那 @Transaction 是如何保证获取到的是同一个 SqlSession 对象呢？</strong></p> <h3> <a id="_SqlSession__65" rel="nofollow"></a>开启事务为什么可以保证获取到的是同一个 SqlSession 对象</h3> <p>首先，spring 是通过 <code>SqlsessionTemplate</code> 创建 SqlSession 代理对象操作 mybatis 中的 SqlSession 对象</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">,</span> <span class="token class-name">ExecutorType</span> executorType<span class="token punctuation">,</span>                           <span class="token class-name">PersistenceExceptionTranslator</span> exceptionTranslator<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>      <span class="token function">notNull</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">,</span> <span class="token string">"Property 'sqlSessionFactory' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">notNull</span><span class="token punctuation">(</span>executorType<span class="token punctuation">,</span> <span class="token string">"Property 'executorType' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>executorType <span class="token operator">=</span> executorType<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>exceptionTranslator <span class="token operator">=</span> exceptionTranslator<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionProxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SqlSession</span><span class="token punctuation">)</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                          <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{<!-- --></span> <span class="token class-name">SqlSession</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <p>其中 <code>SqlSessionInterceptor</code> 是创建 代理 sqlSession 的过程</p> <h3> <a id="SqlSessionInterceptor_89" rel="nofollow"></a>SqlSessionInterceptor</h3> <pre><code class="prism language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">SqlSessionInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{<!-- --></span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{<!-- --></span>               <span class="token comment">//获取 SqlSession 关键</span>       <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">,</span>           <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>executorType<span class="token punctuation">,</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>exceptionTranslator<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>         <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSqlSessionTransactional</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>           <span class="token comment">// force commit even on non-dirty sessions because some databases require</span>           <span class="token comment">// a commit/rollback before calling close()</span>           sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> result<span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token class-name">Throwable</span> unwrapped <span class="token operator">=</span> <span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>exceptionTranslator <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> unwrapped <span class="token keyword">instanceof</span> <span class="token class-name">PersistenceException</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>           <span class="token comment">// release the connection to avoid a deadlock if the translator is no loaded. See issue #22</span>           <span class="token function">closeSqlSession</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>           sqlSession <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token class-name">Throwable</span> translated <span class="token operator">=</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>exceptionTranslator               <span class="token punctuation">.</span><span class="token function">translateExceptionIfPossible</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PersistenceException</span><span class="token punctuation">)</span> unwrapped<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>translated <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             unwrapped <span class="token operator">=</span> translated<span class="token punctuation">;</span>           <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">throw</span> unwrapped<span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>sqlSession <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>           <span class="token function">closeSqlSession</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span> </code></pre> <p>在 <code>getSqlSession</code> 来创建 sqlSession</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SqlSession</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionFactory</span> sessionFactory<span class="token punctuation">,</span> <span class="token class-name">ExecutorType</span> executorType<span class="token punctuation">,</span>                                        <span class="token class-name">PersistenceExceptionTranslator</span> exceptionTranslator<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>      <span class="token function">notNull</span><span class="token punctuation">(</span>sessionFactory<span class="token punctuation">,</span> NO_SQL_SESSION_FACTORY_SPECIFIED<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">notNull</span><span class="token punctuation">(</span>executorType<span class="token punctuation">,</span> NO_EXECUTOR_TYPE_SPECIFIED<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 从 threadLocal 中获取 SessionHolder</span>     <span class="token class-name">SqlSessionHolder</span> holder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SqlSessionHolder</span><span class="token punctuation">)</span> <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>sessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 从 SessionHolder 获取 sqlSession</span>     <span class="token class-name">SqlSession</span> session <span class="token operator">=</span> <span class="token function">sessionHolder</span><span class="token punctuation">(</span>executorType<span class="token punctuation">,</span> holder<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> session<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">"Creating a new SqlSession"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     session <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span>executorType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 将 SqlSessionHolder 与当前线程绑定</span>     <span class="token function">registerSessionHolder</span><span class="token punctuation">(</span>sessionFactory<span class="token punctuation">,</span> executorType<span class="token punctuation">,</span> exceptionTranslator<span class="token punctuation">,</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> session<span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <p>这里分三个步骤:</p> <ul> <li>从 threadLocal 中获取 SessionHolder</li> <li>从 SqlSessionHolder 获取 sqlSession, 不为空则返回</li> <li>如果 sqlSession 为空， 创建新的 sqlSession , 并将 SqlSessionHolder 与当前线程绑定</li> </ul> <p>**这样 从 SqlSessionHolder 中获取的 SqlSession 就是同一个对象了 **</p> <h4> <a id="_threadLocal__SessionHolder_167" rel="nofollow"></a>从 threadLocal 中获取 SessionHolder</h4> <p><code>TransactionSynchronizationManager.getResource(sessionFactory)</code></p> <pre><code class="prism language-java"><span class="token comment">/** * Retrieve a resource for the given key that is bound to the current thread. */</span> <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token class-name">Object</span> actualKey <span class="token operator">=</span> <span class="token class-name">TransactionSynchronizationUtils</span><span class="token punctuation">.</span><span class="token function">unwrapResourceIfNecessary</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token function">doGetResource</span><span class="token punctuation">(</span>actualKey<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">//从 threadLocal 中获取 SqlSessionHolder</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">doGetResource</span><span class="token punctuation">(</span><span class="token class-name">Object</span> actualKey<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">//	private static final ThreadLocal&lt;Map&lt;Object, Object&gt;&gt; </span>     <span class="token comment">//   resources = new NamedThreadLocal&lt;&gt;("Transactional resources");</span>     <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token class-name">Object</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>actualKey<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Transparently remove ResourceHolder that was marked as void...</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">ResourceHolder</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ResourceHolder</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>actualKey<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Remove entire ThreadLocal if empty...</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             resources<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <h4> <a id="_SessionHolder__sqlSession_204" rel="nofollow"></a>从 SessionHolder 获取 sqlSession</h4> <p><code>SqlSession session = sessionHolder(executorType, holder)</code></p> <pre><code class="prism language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SqlSession</span> <span class="token function">sessionHolder</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span> executorType<span class="token punctuation">,</span> <span class="token class-name">SqlSessionHolder</span> holder<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token class-name">SqlSession</span> session <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token comment">// 如果 holder 不为空</span>     <span class="token comment">// 并且 holder 开启了事务</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>holder <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> holder<span class="token punctuation">.</span><span class="token function">isSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>holder<span class="token punctuation">.</span><span class="token function">getExecutorType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransientDataAccessResourceException</span><span class="token punctuation">(</span>                 <span class="token string">"Cannot change the ExecutorType when there is an existing transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>          holder<span class="token punctuation">.</span><span class="token function">requested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         session <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> session<span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <p>从 SqlSessionHolder 获取到 同一个 SqlSession 的条件是:</p> <ul> <li>holder 不为空</li> <li>holder 开启了事务</li> </ul> <h4> <a id="_sqlSession___sqlSession___SqlSessionHolder__232" rel="nofollow"></a>如果 sqlSession 为空， 创建新的 sqlSession , 并将 SqlSessionHolder 与当前线程绑定</h4> <p><code>registerSessionHolder(sessionFactory, executorType, exceptionTranslator, session);</code></p> <pre><code class="prism language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerSessionHolder</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionFactory</span> sessionFactory<span class="token punctuation">,</span> <span class="token class-name">ExecutorType</span> executorType<span class="token punctuation">,</span>       <span class="token class-name">PersistenceExceptionTranslator</span> exceptionTranslator<span class="token punctuation">,</span> <span class="token class-name">SqlSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token class-name">SqlSessionHolder</span> holder<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">isSynchronizationActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>       <span class="token class-name">Environment</span> environment <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getTransactionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">SpringManagedTransactionFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>          <span class="token comment">// 用SqlSession 构建SqlSessionHolder</span>         holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionHolder</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> executorType<span class="token punctuation">,</span> exceptionTranslator<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 将SqlSessionHolder与 当前线程绑定</span>         <span class="token comment">// 通过ThreadLocal 传递</span>         <span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span>sessionFactory<span class="token punctuation">,</span> holder<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">TransactionSynchronizationManager</span>             <span class="token punctuation">.</span><span class="token function">registerSynchronization</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SqlSessionSynchronization</span><span class="token punctuation">(</span>holder<span class="token punctuation">,</span> sessionFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         holder<span class="token punctuation">.</span><span class="token function">setSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         holder<span class="token punctuation">.</span><span class="token function">requested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSynchronizationManager</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>           LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">"SqlSession ["</span> <span class="token operator">+</span> session               <span class="token operator">+</span> <span class="token string">"] was not registered DataSource is not transactional"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TransientDataAccessResourceException</span><span class="token punctuation">(</span>               <span class="token string">"SqlSessionFactory must be using a SpringManagedTransactionFactory ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>       LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">"SqlSession ["</span> <span class="token operator">+</span> session<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token punctuation">}</span> </code></pre> <ul> <li>用SqlSession 构建SqlSessionHolder</li> <li>将SqlSessionHolder与 当前线程绑定, 通过ThreadLocal 传递</li> </ul> <p>再回到刚才的问题<strong>开启事务为什么可以保证获取到的是同一个 SqlSession 对象?</strong></p> <p><em>spring 当且仅当在开启事务的场景下，通过 ThreadLocal 传递 同一个 SqlSession 对象</em></p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-30267.htm">十大动物疫苗公司排名前十（动物疫苗上市公司排名）</a></p>
                                        <p>下一个：<a href="/news/article-30746.htm">猫体内驱虫用什么药比较好（猫体内驱虫用什么药比较好 知乎）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-12-18-free-high-speed-nodes.htm" title="12月18日 | Hysteria2每天更新18.6M/S免费节点订阅链接">12月18日 | Hysteria2每天更新18.6M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-25133.htm" title="动物疫苗接种简报范文 动物疫苗接种简报范文大全">动物疫苗接种简报范文 动物疫苗接种简报范文大全</a></li>
                        <li class="py-2"><a href="/news/article-27451.htm" title="河南兽药品牌排名（河南最好兽药厂家直销）">河南兽药品牌排名（河南最好兽药厂家直销）</a></li>
                        <li class="py-2"><a href="/news/article-22355.htm" title="开动物医院什么资质可以开药（开动物医院什么资质可以开药店）">开动物医院什么资质可以开药（开动物医院什么资质可以开药店）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-21-free-subscribe-node.htm" title="9月21日 | Hysteria2每天更新22.5M/S免费节点订阅链接">9月21日 | Hysteria2每天更新22.5M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-23-today-hysteria-node.htm" title="12月23日 | Hysteria2每天更新21.3M/S免费节点订阅链接">12月23日 | Hysteria2每天更新21.3M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-20-node-share-links.htm" title="8月20日 | Hysteria2每天更新19.2M/S免费节点订阅链接">8月20日 | Hysteria2每天更新19.2M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-3-hysteria-node-share.htm" title="11月3日 | Hysteria2每天更新22.8M/S免费节点订阅链接">11月3日 | Hysteria2每天更新22.8M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-20067.htm" title="vue-v-model 常用修饰符">vue-v-model 常用修饰符</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-10-free-subscribe-node.htm" title="10月10日 | Hysteria2每天更新22.5M/S免费节点订阅链接">10月10日 | Hysteria2每天更新22.5M/S免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">78</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">1</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <!-- FOOTER 
            =================-->
    <footer>
        <div class="container-fluid footer-b text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
            <small>Hysteria2 Node免费节点分享站 版权所有 Powered by WordPress</small>
        </div>
    </footer>
    <script src="/assets/website/js/frontend/hysteria2node/popper.min.js"></script>
    <script src="/assets/website/js/frontend/hysteria2node/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/hysteria2node/jquery.easing.min.js"></script>
    <script src="/assets/website/js/frontend/hysteria2node/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/hysteria2node/wow.min.js"></script>
    <script src="/assets/website/js/frontend/hysteria2node/app.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>